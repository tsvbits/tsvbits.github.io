{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/flash-viewer-story/",
    "result": {"pageContext":{"slug":"/flash-viewer-story/","previous":{"html":"<p>Here I will write some words from time to time</p>","timeToRead":1,"fields":{"slug":"/init/","langKey":"en","directoryName":"init","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Restarted my blog","date":"August 10, 2019","spoiler":"SergeyT's blog is restarted","tags":["note","meta"],"reddit":null}},"next":{"html":"<p><strong>TL;DR</strong> PageFX compiler is really interesting because it is compiler</p>\n<p>In <a href=\"/flash-viewer-story/\">my previous post</a> I’ve shortly written about PageFX cross compiler.\nIts code is available on <a href=\"https://github.com/GrapeCity/pagefx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">github</a> now.</p>\n<h2 id=\"what-makes-this-project-interesting-for-compiler-writers\" style=\"position:relative;\"><a href=\"#what-makes-this-project-interesting-for-compiler-writers\" aria-label=\"what makes this project interesting for compiler writers permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>What makes this project interesting for compiler writers?</h2>\n<p>Here is my top reasons:</p>\n<ul>\n<li>Compilers are complicated things and so it is interesting for learning</li>\n<li>It has a lot of IL code generation (only getting native strings support were not easy to do)</li>\n<li>It has direct instruction-level translation between byte code formats</li>\n<li>It incrementally compiles only classes and methods called from program entry point</li>\n<li>It has smart linker that resolves dependency graph and emits only required resources extracted and transcoded (deserialized and serialized) from SWF files</li>\n<li>It has experimental generation of JavaScript code by implementing a little CIL interpretter in JavaScript</li>\n<li>It has experimental CIL interpretter written in C#</li>\n</ul>\n<p>So please go ahead and learn PageFX reading its codebase.</p>\n<p>You might also find interesting <a href=\"https://github.com/sergeyt/cil.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this old project</a> available on github.\nIt has declarative <a href=\"https://github.com/sergeyt/cil.js/blob/master/src/runtime/meta.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CIL reader</a> written in JavaScript.\nThis could be a starting point for full CIL interpreter in JavaScript.\nYou can take <a href=\"https://github.com/GrapeCity/pagefx/blob/master/source/libs/Core/JavaScript/core.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this CIL interpretter</a> as example and complete it.\nFeel free to fork and play anyway.</p>\n<p>If someone interested to get more details about PageFX project please <a href=\"mailto:stodyshev@gmail.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">email me</a>.\nI can write a series of blog posts perhaps someone may find it interesting.</p>\n<p>P.S. Anyone wanted to compile PageFX with latest C# compiler? Please send pull request :)</p>","timeToRead":1,"fields":{"slug":"/pfx-is-interesting/","langKey":"en","directoryName":"pfx-is-interesting","maybeAbsoluteLinks":["/flash-viewer-story/"]},"frontmatter":{"title":"Why PageFX is interesting for compiler writers?","date":"August 12, 2019","spoiler":"PageFX is easy to learn","tags":null,"reddit":null}},"translations":[],"translatedLinks":[],"html":"<blockquote>\n<p><strong>TL;DR</strong> GrapeCity open-sources dotnet to flash bytecode cross-compiler</p>\n</blockquote>\n<p>It was not easy path. First we implemented a cross compiler from <a href=\"https://en.wikipedia.org/wiki/Common_Intermediate_Language\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dotnet</a> to <a href=\"https://www.adobe.com/content/dam/acom/en/devnet/pdf/avm2overview.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AVM</a> bytecode.</p>\n<p>And this post is about this cross compiling tool. It is called <a href=\"https://github.com/GrapeCity/pagefx\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">PageFX</a>. I can use PFX for reference too.</p>\n<h2 id=\"history\" style=\"position:relative;\"><a href=\"#history\" aria-label=\"history permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>History</h2>\n<p>This project started in the early days of WPF. It was intended to allow building multi-platform internet applications using C# and the Adobe Flash Player VM. The project was pivoted for internal use at <a href=\"https://en.wikipedia.org/wiki/Data_Dynamics\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Data Dynamics</a> after the release of Microsoft Silverlight.</p>\n<p>I joined this project in June of 2007. My first experience with this technology was an attempt to build a real-world applications on the initial prototypes, which were unsuccessful. We decided to rewrite the compiler based on the following:</p>\n<ul>\n<li><a href=\"https://www.ecma-international.org/publications/files/ECMA-ST/ECMA-335.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET CLI ECMA-335 spec</a> - this doc describes format of .NET executable files</li>\n<li><a href=\"https://www.adobe.com/content/dam/acom/en/devnet/pdf/avm2overview.pdf\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AVM overview doc</a> - this doc describes format of byte code parsed and executed by ActionScript Virtual Machine</li>\n<li><a href=\"https://github.com/adobe/avmplus\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AVM source code</a> - initial version was hosted at <a href=\"https://hg.mozilla.org/tamarin-central\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mozilla</a></li>\n<li>also I’ve showed CIL, SWF, ABC readers I’ve done so far as artifact of my learning CIL and ABC executable file formats</li>\n</ul>\n<p>I made few major iterations to make the compiler.\nFirst iteration was not successful though a lot of test cases worked. I’ve tried to build .NET decompiler first and then translate it to AVM bytecode.\nI don’t remember why I’ve decided to deny approach with decompiler, but idea with binary translation won and I’ve quickly implemented first prototype.</p>\n<p>Then it took about 6 months to get working a lot of <a href=\"https://www.mono-project.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Mono</a> tests for bytecode generated by C# 2.0 CLR 1.0 format (basically no generics).</p>\n<p>With the availability of more resources the following were added:</p>\n<ul>\n<li>Almost full support of CLR 2.0 byte code format including generics</li>\n<li>Interop with libraries built by ActionScript compiler (ASC)</li>\n<li>Debugger for Visual Studio 2008</li>\n</ul>\n<p>The project was successfully used to build our multi-platform report viewer as part of the ActiveReports Server platform and ActiveReports product lines.</p>\n<h2 id=\"going-open-source\" style=\"position:relative;\"><a href=\"#going-open-source\" aria-label=\"going open source permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Going open source</h2>\n<p>This project might be interesting for education purposes for Microsoft Research students or any other universities.</p>\n<p>I’ve made an experimental branch with additional changes that were not used in production:</p>\n<ul>\n<li>PFX compiler to be cross-platform/runnable on Mono VM and compatible with Mono C# compiler</li>\n<li>Reuse of Mono MDB reader, i.e. managed reader of debug symbols. Previously we use COM library runnable only on Windows</li>\n<li>Multi-targeting on Flash Player 9.0 and higher, i.e. Flash APIs are declared in separate assemblies auto-generated as part of build process</li>\n<li>Multi-targeting on Flex SDK 3.3 and higher. Interop assemblies for Flex SDK are also auto-generated</li>\n<li>Faster lazy parsing of assemblies into immutable data structures with less memory consumption</li>\n</ul>\n<p>In addition master branch includes these interesting experiments:</p>\n<ul>\n<li>JavaScript code generation (many tests were passing)</li>\n<li>CIL interpreter written in pure C# on top of PFX infrastructure</li>\n<li>Port of <a href=\"https://gamua.com/starling/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Starling game engine</a></li>\n</ul>\n<p>You might also find interesting <a href=\"https://github.com/sergeyt/cil.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">this old project</a> available on github.\nIt has declarative <a href=\"https://github.com/sergeyt/cil.js/blob/master/src/runtime/meta.js\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CIL reader</a> written in JavaScript.\nThis could be a starting point for full CIL interpreter in JavaScript.</p>\n<p>If someone interested to get more details about PageFX project please <a href=\"mailto:stodyshev@gmail.com\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">email me</a>.\nI can write a series of blog posts on <a href=\"/pfx-is-interesting/\">the topic</a>.</p>\n<h2 id=\"funny-facts\" style=\"position:relative;\"><a href=\"#funny-facts\" aria-label=\"funny facts permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Funny facts</h2>\n<ul>\n<li>Initial prototype of Flash Viewer was hacked by <a href=\"https://twitter.com/olegzeee\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">olegzee</a> in July 2008 in few weeks during his vacation</li>\n<li>PFX compiler was used almost ten years after discontinue of development. Without any fixes it compiled flash report viewer on build machines until drop of its support. I know it had bugs, but it was enough for this report viewer</li>\n</ul>\n<p>P.S. All dates might be a little bit wrong. Sorry for that</p>","timeToRead":3,"title":"How did we make Flash Viewer at ActiveReports","date":"August 11, 2019","spoiler":"Open sourcing PageFX compiler","tags":["project","story"],"reddit":null}},
    "staticQueryHashes": ["336482444"]}