{
    "componentChunkName": "component---src-templates-blog-post-js",
    "path": "/activereports/",
    "result": {"pageContext":{"slug":"/activereports/","previous":{"html":"<p>At <a href=\"https://www.iae.nsk.su/en/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">IAE</a> I contributed significantly to interferometry software they design.\nI was major driver doing more modern version of such specialized software.</p>\n<h2 id=\"tools-used-for-implementation\" style=\"position:relative;\"><a href=\"#tools-used-for-implementation\" aria-label=\"tools used for implementation permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools used for implementation</h2>\n<ul>\n<li>C#</li>\n<li>WinForms</li>\n<li>OpenGL</li>\n</ul>\n<h2 id=\"screenshots\" style=\"position:relative;\"><a href=\"#screenshots\" aria-label=\"screenshots permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Screenshots</h2>\n<blockquote>\n<p>TDB sorry no images atm</p>\n</blockquote>","timeToRead":1,"fields":{"slug":"/interferometry/","langKey":"en","directoryName":"interferometry","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Interferometry","date":"May 05, 2020","spoiler":"Specialized software built during education period","tags":["project"],"reddit":null}},"next":{"html":"<blockquote>\n<p>TL;DR see the code at <a href=\"https://github.com/lingvograph/dataminer/blob/master/Program.cs#L18\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">https://github.com/lingvograph/dataminer/blob/master/Program.cs#L18</a></p>\n</blockquote>\n<p>This small program takes YAML file that defines how to parse HTML page and outputs tuples of structured data.</p>\n<p>Sample YAML file to extract data from <a href=\"https://www.macmillandictionary.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">Macmillan Dictionary</a>:</p>\n<div class=\"gatsby-highlight\" data-language=\"yaml\"><pre class=\"language-yaml\"><code class=\"language-yaml\"><span class=\"token punctuation\">-</span> <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> .PRON\n  <span class=\"token key atrule\">term</span><span class=\"token punctuation\">:</span> transcription\n<span class=\"token comment\"># tags</span>\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> .PART<span class=\"token punctuation\">-</span>OF<span class=\"token punctuation\">-</span>SPEECH\n  <span class=\"token key atrule\">uniq</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">term</span><span class=\"token punctuation\">:</span> tag\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> .SYNTAX<span class=\"token punctuation\">-</span>CODING\n  <span class=\"token key atrule\">unique</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span>\n  <span class=\"token key atrule\">term</span><span class=\"token punctuation\">:</span> tag\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> .DEFINITION\n  <span class=\"token key atrule\">term</span><span class=\"token punctuation\">:</span> definition\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> .EXAMPLES\n  <span class=\"token key atrule\">term</span><span class=\"token punctuation\">:</span> in\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> .PHR<span class=\"token punctuation\">-</span>XREF\n  <span class=\"token key atrule\">term</span><span class=\"token punctuation\">:</span> in\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> .synonyms .theslink\n  <span class=\"token key atrule\">exclude</span><span class=\"token punctuation\">:</span> <span class=\"token string\">\"...\"</span>\n  <span class=\"token key atrule\">term</span><span class=\"token punctuation\">:</span> synonym\n<span class=\"token punctuation\">-</span> <span class=\"token key atrule\">selector</span><span class=\"token punctuation\">:</span> .audio_play_button\n  <span class=\"token key atrule\">audio</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"@data-src-mp3\"</span>\n    <span class=\"token punctuation\">-</span> <span class=\"token string\">\"@data-src-ogg\"</span></code></pre></div>\n<p>And the core part of parser looks like:</p>\n<div class=\"gatsby-highlight\" data-language=\"csharp\"><pre class=\"language-csharp\"><code class=\"language-csharp\"><span class=\"token keyword\">private</span> <span class=\"token keyword\">static</span> <span class=\"token keyword\">async</span> <span class=\"token return-type class-name\">Task</span> <span class=\"token function\">Parse</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">DataSource</span> src<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Input</span> input<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> url <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span><span class=\"token function\">Url</span><span class=\"token punctuation\">(</span>input<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> config <span class=\"token operator\">=</span> Configuration<span class=\"token punctuation\">.</span>Default<span class=\"token punctuation\">.</span><span class=\"token function\">WithDefaultLoader</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> context <span class=\"token operator\">=</span> BrowsingContext<span class=\"token punctuation\">.</span><span class=\"token function\">New</span><span class=\"token punctuation\">(</span>config<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> doc <span class=\"token operator\">=</span> <span class=\"token keyword\">await</span> context<span class=\"token punctuation\">.</span><span class=\"token function\">OpenAsync</span><span class=\"token punctuation\">(</span>url<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> root <span class=\"token operator\">=</span> src<span class=\"token punctuation\">.</span>Schema<span class=\"token punctuation\">.</span>RootNode <span class=\"token keyword\">as</span> <span class=\"token class-name\">YamlSequenceNode</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>root <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">throw</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">InvalidOperationException</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Expect list of nodes\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token return-type class-name\">IEnumerable<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">object</span><span class=\"token punctuation\">></span></span> <span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">YamlMappingNode</span> query<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> selector <span class=\"token operator\">=</span> query<span class=\"token punctuation\">[</span><span class=\"token string\">\"selector\"</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> term <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"term\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> audio <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"audio\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> exclude <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"exclude\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">?.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> uniq <span class=\"token operator\">=</span> query<span class=\"token punctuation\">.</span><span class=\"token function\">Get</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"uniq\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">?.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token string\">\"true\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> <span class=\"token keyword\">set</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token constructor-invocation class-name\">HashSet<span class=\"token punctuation\">&lt;</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> elem <span class=\"token keyword\">in</span> doc<span class=\"token punctuation\">.</span><span class=\"token function\">QuerySelectorAll</span><span class=\"token punctuation\">(</span>selector<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>term <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> name <span class=\"token operator\">=</span> term<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> text <span class=\"token operator\">=</span> elem<span class=\"token punctuation\">.</span>TextContent<span class=\"token punctuation\">.</span><span class=\"token function\">Strip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>exclude <span class=\"token operator\">!=</span> <span class=\"token keyword\">null</span> <span class=\"token operator\">&amp;&amp;</span> text<span class=\"token punctuation\">.</span><span class=\"token function\">Equals</span><span class=\"token punctuation\">(</span>exclude<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uniq <span class=\"token operator\">&amp;&amp;</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token function\">Contains</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"(</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">name</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">,lang=</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">input<span class=\"token punctuation\">.</span>Lang</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">,text=\\\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">text</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\\")\"</span></span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>uniq<span class=\"token punctuation\">)</span> <span class=\"token keyword\">set</span><span class=\"token punctuation\">.</span><span class=\"token function\">Add</span><span class=\"token punctuation\">(</span>text<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>audio <span class=\"token keyword\">is</span> <span class=\"token class-name\">YamlSequenceNode</span> seq<span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> cmd <span class=\"token keyword\">in</span> seq<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">Select</span><span class=\"token punctuation\">(</span>t <span class=\"token operator\">=></span> t<span class=\"token punctuation\">.</span><span class=\"token function\">ToString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> val <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">.</span><span class=\"token function\">StartsWith</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"@\"</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">?</span> elem<span class=\"token punctuation\">.</span><span class=\"token function\">GetAttribute</span><span class=\"token punctuation\">(</span>cmd<span class=\"token punctuation\">.</span><span class=\"token function\">Substring</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        <span class=\"token punctuation\">:</span> elem<span class=\"token punctuation\">.</span>TextContent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    val <span class=\"token operator\">=</span> val<span class=\"token punctuation\">.</span><span class=\"token function\">Strip</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">string</span><span class=\"token punctuation\">.</span><span class=\"token function\">IsNullOrEmpty</span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                    <span class=\"token punctuation\">{</span>\n                        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n\n                    <span class=\"token keyword\">yield</span> <span class=\"token keyword\">return</span> <span class=\"token interpolation-string\"><span class=\"token string\">$\"(audio,url=\\\"</span><span class=\"token interpolation\"><span class=\"token punctuation\">{</span><span class=\"token expression language-csharp\">val</span><span class=\"token punctuation\">}</span></span><span class=\"token string\">\\\")\"</span></span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> child <span class=\"token keyword\">in</span> root<span class=\"token punctuation\">.</span>Children<span class=\"token punctuation\">.</span><span class=\"token function\">OrEmpty</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token class-name\"><span class=\"token keyword\">var</span></span> query <span class=\"token operator\">=</span> child <span class=\"token keyword\">as</span> <span class=\"token class-name\">YamlMappingNode</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>query <span class=\"token operator\">==</span> <span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span>Error<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"skip node {0}\"</span><span class=\"token punctuation\">,</span> child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">foreach</span> <span class=\"token punctuation\">(</span><span class=\"token class-name\"><span class=\"token keyword\">var</span></span> result <span class=\"token keyword\">in</span> <span class=\"token function\">Exec</span><span class=\"token punctuation\">(</span>query<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            Console<span class=\"token punctuation\">.</span><span class=\"token function\">WriteLine</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2 id=\"status\" style=\"position:relative;\"><a href=\"#status\" aria-label=\"status permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Status</h2>\n<p>It is prototype and pretty much experimental code. It can be easily modified for your needs</p>\n<h2 id=\"tools\" style=\"position:relative;\"><a href=\"#tools\" aria-label=\"tools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools</h2>\n<p>It is done with:</p>\n<ul>\n<li><a href=\"https://dotnet.microsoft.com/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">.NET</a> - it needs dotnet runtime for execution</li>\n<li><a href=\"https://github.com/dotnet/csharplang\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">CSharp</a> - yeah it is implemented in C# language</li>\n<li><a href=\"https://github.com/AngleSharp/AngleSharp\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">AngularSharp</a> - core thing to parse HTML and traverse the document tree</li>\n<li><a href=\"https://github.com/aaubry/YamlDotNet\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">YamlDotNet</a> - YAML parser</li>\n</ul>\n<p>Enjoy! EOF 😄</p>","timeToRead":2,"fields":{"slug":"/dataminer/","langKey":"en","directoryName":"dataminer","maybeAbsoluteLinks":[]},"frontmatter":{"title":"Data Miner","date":"July 15, 2020","spoiler":"Declarative web scraper implemented using AngularSharp","tags":["csharp","scraping","sample"],"reddit":"https://www.reddit.com/r/dotnet/comments/hsprjn/declarative_web_scraper_using_angularsharp_and"}},"translations":[],"translatedLinks":[],"html":"<p>I have amazing time working on <a href=\"https://www.grapecity.com/activereports\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">ActiveReports</a> products together with talented guys from <a href=\"http://dataworks.co/\" target=\"_blank\" rel=\"nofollow noopener noreferrer\">dataworks.co</a>.</p>\n<p>This report generator is fastest and built using heavily functional programming techniques like lazy computations.\nIt is even capable to generate infinite report from infinite data source.</p>\n<h2 id=\"tools\" style=\"position:relative;\"><a href=\"#tools\" aria-label=\"tools permalink\" class=\"anchor before\"><svg aria-hidden=\"true\" focusable=\"false\" height=\"16\" version=\"1.1\" viewBox=\"0 0 16 16\" width=\"16\"><path fill-rule=\"evenodd\" d=\"M4 9h1v1H4c-1.5 0-3-1.69-3-3.5S2.55 3 4 3h4c1.45 0 3 1.69 3 3.5 0 1.41-.91 2.72-2 3.25V8.59c.58-.45 1-1.27 1-2.09C10 5.22 8.98 4 8 4H4c-.98 0-2 1.22-2 2.5S3 9 4 9zm9-3h-1v1h1c1 0 2 1.22 2 2.5S13.98 12 13 12H9c-.98 0-2-1.22-2-2.5 0-.83.42-1.64 1-2.09V6.25c-1.09.53-2 1.84-2 3.25C6 11.31 7.55 13 9 13h4c1.45 0 3-1.69 3-3.5S14.5 6 13 6z\"></path></svg></a>Tools</h2>\n<ul>\n<li>.NET</li>\n<li>C#</li>\n</ul>","timeToRead":1,"title":"ActiveReports","date":"May 05, 2020","spoiler":"Masterpiece of software engineering I have ever worked on","tags":null,"reddit":null}},
    "staticQueryHashes": ["336482444"]}